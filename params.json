{"name":"Jachievement","body":"# Welcome!\r\n*JAchievement* is a small library written in Java that provides achievement notification features to any Java application. In short, this library provides an easy way for you to display achievements within an application.\r\n\r\n# The authors\r\n*JAchievement* is maintained by Antoine Neveux &nbsp;![France](http://jachievement.sourceforge.net/images/france.png)&nbsp;&nbsp; and Paulo Roberto Massa Cereda &nbsp;![Brazil](http://jachievement.sourceforge.net/images/brazil.png).\r\n\r\n# License\r\nThe library is licensed under the [New BSD License](http://www.opensource.org/licenses/bsd-license.php). The New BSD License has been verified as a GPL-compatible free software license by the [Free Software Foundation](http://www.fsf.org/), and has been vetted as an open source license by the [Open Source Initiative](http://www.opensource.org/).\r\n\r\nThe default achievement icon is provided by [WPZOOM](http://www.wpzoom.com/) and licensed under the [Creative Commons Attribution-Share Alike 3.0 Unported License](http://creativecommons.org/licenses/by-sa/3.0/).\r\n\r\n# Usage\r\n*JAchievement* relies on a few lines of code. There are two dependencies, [Trident](http://kenai.com/projects/trident) and [MigLayout](http://www.migcalendar.com/miglayout/) libraries, so please add them to your classpath. And of course, don't forget to include the *JAchievement* library as well. We also provide a special `jar` file with \"batteries-included\", that is, with all dependencies packed together. The minimum working example is presented as follows:\r\n\r\n```java\r\nAchievement achievement = new Achievement(\"Achievement unlocked\", \"My first Java code.\");\r\nAchievementQueue queue = new AchievementQueue();\r\nqueue.add(achievement);\r\n```\r\n\r\nThat's it. In line 1, we created a new `Achievement`, in line 2 we created a new `AchievementQueue` and finally in line 3 we added the newly created object to the queue. By running it, we get the following output:\r\n\r\n![Achievement 1](http://jachievement.sourceforge.net/images/screen01.png)\r\n\r\nThe achievement is displayed in the top left corner of the screen. If you add\r\n\r\n```java\r\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n```\r\n\r\nin your application, the achievement notification will use the UI elements from the system look and feel. If you are in Windows, your achievement will look like:\r\n\r\n![Achievement 2](http://jachievement.sourceforge.net/images/screen02.png)\r\n\r\nThere are two constructors available for `Achievement`:\r\n\r\n```java\r\npublic Achievement(String title, String description)\r\npublic Achievement(String title, String description, AchievementConfig config)\r\n```\r\n\r\nNow let's take a look in the constructors arguments: `title` is the title of the achievement, that is, the highlighted text in the window. The `description` argument refers to the body text, the one right below the title. An optional `config` parameter can be used to configure the achievement behaviour, such as colours, fonts and icons.\r\n\r\nFor a more complex example, consider the following code:\r\n\r\n```java\r\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\r\n\r\nAchievementConfig config = new AchievementConfig();\r\nconfig.setBackgroundColor(Color.CYAN);\r\nconfig.setTitleColor(Color.BLUE);\r\nconfig.setDescriptionColor(Color.BLUE);\r\nconfig.setBorderColor(Color.BLUE);\r\n    \r\nAchievement achievement = new Achievement(\"Achievement unlocked\", \"My second Java code.\", config);\r\nAchievementQueue queue = new AchievementQueue();\r\nqueue.add(achievement);\r\n```\r\n\r\nThe code is self-explanatory. We created an instance of `AchievementConfig` and called some methods to set how our new achievement should look. The output is presented as follows:\r\n\r\n![Achievement 3](http://jachievement.sourceforge.net/images/screen03.png)\r\n\r\nLet's take a look at the complete list of setters from `AchievementConfig`:\r\n\r\n```java\r\npublic void setAchievementPosition(AchievementPosition achievementPosition)\r\npublic void setDistanceFromScreen(int distanceFromScreen)\r\npublic void setDuration(long milliseconds)\r\npublic void setInDuration(long milliseconds)\r\npublic void setOutDuration(long milliseconds)\r\npublic void setBackgroundColor(Color backgroundColor)\r\npublic void setBackgroundImage(ImageIcon backgroundImage)\r\npublic void setBorderColor(Color borderColor)\r\npublic void setBorderThickness(int borderThickness)\r\npublic void setDescriptionColor(Color descriptionColor)\r\npublic void setDescriptionFont(Font descriptionFont)\r\npublic void setIcon(ImageIcon icon)\r\npublic void setTitleColor(Color titleColor)\r\npublic void setTitleFont(Font titleFont)\r\npublic void setAudioEnabled(boolean audioEnabled)\r\npublic void setAudioInputStream(AudioInputStream audioInputStream)\r\n```\r\n\r\nWe should also mention that you can define the position of the achievement on screen by using one of the values from the `AchievementPosition` enumeration:\r\n\r\n```java\r\npublic enum AchievementPosition {\r\n    TOP_CENTER,\r\n    TOP_LEFT,\r\n    TOP_RIGHT,\r\n    BOTTOM_CENTER,\r\n    BOTTOM_LEFT,\r\n    BOTTOM_RIGHT\r\n}\r\n```\r\n\r\nFrom version 1.0 of *JAchievement* on, multiple achievement notifications are provided by the `AchievementQueue` manager class, which ensures that only a single achievement notification is displayed at a time.\r\n\r\nThe `AchievementQueue` manager class handles the calls for methods of the `Achievement` class. After adding an achievement to the queue, there is no need of calling any methods of the achievement itself.\r\n\r\nTo add an achievement to the queue, it's just a matter of calling the proper method:\r\n\r\n```java\r\npublic synchronized void add(Achievement achievement)\r\n```\r\n\r\nIf there is no achievement notifications in the queue, the achievement notification is displayed right after the call of the `add` method. Otherwise, it will be queued until there is no achievement notifications currently in display. Please note this is a simple *first in first out queue*, so no priorities are estabilished when adding achievement notifications.\r\n\r\n# Download\r\nThe `.jar` files can be found on our [GitHub downloads page](https://github.com/cereda/jachievement/downloads). One of the `.jar` contains all the dependencies, so it can be used without anything else, while the other one contains only the *JAchievement* classes, so you'll need to add the dependencies manually to your application's classpath. And you can also get a `.zip` file of the source code from [GitHub ZipBall feature](https://github.com/cereda/jachievement/zipball/master).\r\n \r\n# Contribute\r\nWe'd be really happy if you'd like to fork *JAchievement*. Feel free to submit some pull requests. And don't hesitate to submit issues too if you have some comments about our work!\r\n\r\n# Contact\r\nYou can contact us through our Twitter accounts, [@antoineneveux](http://www.twitter.com/antoineneveux) and [@paulocereda](http://www.twitter.com/paulocereda), but of course there are other ways of reaching us:\r\n\r\n\r\n- Antoine Neveux &nbsp;[![Homepage](http://jachievement.sourceforge.net/images/email.png)](http://www.antoineneveux.fr/) &nbsp;[![Twitter](http://jachievement.sourceforge.net/images/twitter.png)](http://www.twitter.com/antoineneveux)\r\n- Paulo Roberto Massa Cereda &nbsp;[![Homepage](http://jachievement.sourceforge.net/images/email.png)](http://cereda.users.sourceforge.net/) &nbsp;[![Twitter](http://jachievement.sourceforge.net/images/twitter.png)](http://www.twitter.com/paulocereda)\r\n\r\n# Special thanks\r\nTo these two libraries used in the project: [Trident](http://www.pushing-pixels.org/category/trident) and [MigLayout](http://www.miglayout.com/).","tagline":"An achievement notification library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}